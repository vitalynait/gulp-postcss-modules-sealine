{"version":3,"sources":["../src/index.js"],"names":["generateHash","generateScopedName","postcssModulesPlugin","memCache","filename","relPath","relative","process","cwd","crc32","toString","name","plugins","config","moduleMapping","processStyle","done","text","path","base","getJSON","cssFileName","json","JSON","stringify","from","then","result","fileObj","contents","Buffer","replace","transform","file","encoding","callback","isNull","isStream","PluginError","self","filePath","fileBase","fileContent","err","results","forEach","resultFile","push","obj"],"mappings":";;;;;QAkBgBA,Y,GAAAA,Y;QAMAC,kB,GAAAA,kB;kBAKQC,oB;;AAtBxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;oMAdA;;;;;;;AAgBA,IAAIC,WAAW,EAAf;;AAEO,SAASH,YAAT,CAAsBI,QAAtB,EACP;AACE,MAAMC,UAAU,eAAWC,QAAX,CAAoBC,QAAQC,GAAR,EAApB,EAAmCJ,QAAnC,CAAhB;AACA,SAAO,cAAIK,KAAJ,CAAUJ,OAAV,EAAmBK,QAAnB,CAA4B,EAA5B,CAAP;AACD;;AAEM,SAAST,kBAAT,CAA4BU,IAA5B,EAAkCP,QAAlC,EACP;AACE,SAAUO,IAAV;AACD;;AAEc,SAAST,oBAAT,GACf;AAAA,MAD6CU,OAC7C,uEADuD,EACvD;AAAA,MAD2DC,MAC3D;;AACE,MAAIC,gBAAgB,IAApB;;AAEA,WAASC,YAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,IAAxC,EACA;AACE,QAAI,CAACF,IAAL,EACE,OAAOD,MAAP;;AAEF,WAAO,oDACFJ,OADE,IAEL,8BAAe;AACbX,0BAAoBA,kBADP;AAEbmB,eAAS,iBAASC,WAAT,EAAsBC,IAAtB,EACT;AACER,wBAAgBS,KAAKC,SAAL,CAAeF,IAAf,CAAhB;AACD;AALY,KAAf,CAFK,IAUNf,OAVM,CAUEU,IAVF,EAUQ;AACbQ,YAAMP;AADO,KAVR,EAaNQ,IAbM,CAaD,UAACC,MAAD,EACN;AACE,UAAIxB,SAASe,IAAT,MAAmBJ,aAAvB,EACE,OAAOE,MAAP;;AAEFb,eAASe,IAAT,IAAiBJ,aAAjB;;AAEA,UAAMc,UAAU,oBAAS;AACvBC,kBAAU,IAAIC,MAAJ,CAAWhB,aAAX,CADa;AAEvBI,cAAMA,KAAKa,OAAL,CAAa,OAAb,EAAsB,YAAtB,CAFiB;AAGvBZ,cAAMA;AAHiB,OAAT,CAAhB;;AAMA,aAAOH,KAAK,IAAL,EAAWY,OAAX,CAAP;AACD,KA3BM,CAAP;AA4BD;;AAGD,WAASI,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAmCC,QAAnC,EACA;AACE;;AAEA,QAAIF,KAAKG,MAAL,EAAJ,EACE,OAAOD,SAAS,IAAT,EAAeF,IAAf,CAAP;;AAEF,QAAIA,KAAKI,QAAL,EAAJ,EACE,OAAOF,SAAS,IAAI,mBAAMG,WAAV,CAAsB,8BAAtB,EAAsD,2BAAtD,CAAT,CAAP;;AAEF,QAAIC,OAAO,IAAX;;AAEA,QAAIC,WAAWP,KAAKf,IAApB;AACA,QAAIuB,WAAWR,KAAKd,IAApB;AACA,QAAIuB,cAAcT,KAAKJ,QAAL,CAAcnB,QAAd,CAAuB,MAAvB,CAAlB;;AAEA,WAAO,sBAAO,CACZ,UAASM,IAAT,EACA;AACED,mBAAaC,IAAb,EAAmB0B,WAAnB,EAAgCF,QAAhC,EAA0CC,QAA1C;AACD,KAJW,CAAP,EAMP,UAACE,GAAD,EAAMC,OAAN,EACA;AACE,UAAID,GAAJ,EACE,OAAOR,SAAS,IAAI,mBAAMG,WAAV,CAAsB,8BAAtB,EAAsDK,GAAtD,CAAT,CAAP;;AAEFC,cAAQC,OAAR,CAAgB,UAACC,UAAD;AAAA,eAAgBA,cAAcP,KAAKQ,IAAL,CAAUD,UAAV,CAA9B;AAAA,OAAhB;AACA,aAAOX,UAAP;AACD,KAbM,CAAP;AAcD;;AAED,SAAO,kBAAQa,GAAR,CAAYhB,SAAZ,CAAP;AACD","file":"index.js","sourcesContent":["/*\n===============================================================================\n  Gulp Vue-Split\n  Copyright 2016 Sebastian Software GmbH <https://www.sebastian-software.de>\n===============================================================================\n*/\n\nimport through from \"through2\"\nimport File from \"vinyl\"\nimport postcss from \"postcss\"\nimport postcssModules from \"postcss-modules\"\nimport series from \"async/series\"\nimport pathModule from \"path\"\nimport crc from \"crc\"\nimport gutil from \"gulp-util\"\n\nvar memCache = {}\n\nexport function generateHash(filename)\n{\n  const relPath = pathModule.relative(process.cwd(), filename)\n  return crc.crc32(relPath).toString(16)\n}\n\nexport function generateScopedName(name, filename)\n{\n  return `${name}-SealineWidget`\n}\n\nexport default function postcssModulesPlugin(plugins = [], config)\n{\n  var moduleMapping = null\n\n  function processStyle(done, text, path, base)\n  {\n    if (!text)\n      return done()\n\n    return postcss([\n      ...plugins,\n      postcssModules({\n        generateScopedName: generateScopedName,\n        getJSON: function(cssFileName, json)\n        {\n          moduleMapping = JSON.stringify(json)\n        }\n      })\n    ])\n    .process(text, {\n      from: path\n    })\n    .then((result) =>\n    {\n      if (memCache[path] === moduleMapping)\n        return done()\n\n      memCache[path] = moduleMapping\n\n      const fileObj = new File({\n        contents: new Buffer(moduleMapping),\n        path: path.replace(\".scss\", \".scss.json\"),\n        base: base\n      })\n\n      return done(null, fileObj)\n    })\n  }\n\n\n  function transform(file, encoding, callback)\n  {\n    /* eslint no-invalid-this: 0 */\n\n    if (file.isNull())\n      return callback(null, file)\n\n    if (file.isStream())\n      return callback(new gutil.PluginError(\"gulp-postcss-modules-sealine\", \"Streams are not supported\"))\n\n    var self = this\n\n    var filePath = file.path\n    var fileBase = file.base\n    var fileContent = file.contents.toString(\"utf8\")\n\n    return series([\n      function(done)\n      {\n        processStyle(done, fileContent, filePath, fileBase)\n      }\n    ],\n    (err, results) =>\n    {\n      if (err)\n        return callback(new gutil.PluginError(\"gulp-postcss-modules-sealine\", err))\n\n      results.forEach((resultFile) => resultFile && self.push(resultFile))\n      return callback()\n    })\n  }\n\n  return through.obj(transform)\n}\n"]}